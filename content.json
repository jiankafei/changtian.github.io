{"meta":{"title":"Zr的博客","subtitle":"向死而生","description":"王勒的个人博客 Zr的个人博客","author":"王勒","url":"https://jiankafei.github.io"},"pages":[{"title":"","date":"2017-11-21T07:46:53.528Z","updated":"2017-11-21T07:05:10.994Z","comments":true,"path":"404.html","permalink":"https://jiankafei.github.io/404.html","excerpt":"","text":"404"},{"title":"About","date":"2017-12-09T02:18:32.336Z","updated":"2017-12-09T02:18:32.336Z","comments":false,"path":"about/index.html","permalink":"https://jiankafei.github.io/about/index.html","excerpt":"","text":"关于我联系方式 Email：Wll001992Yx@163.com QQ：1181408926 微信：wlqqyx11 个人信息 王勒/男/1992 西安工业大学/本科 微博：WebWll SegmentFault：Wll 博客：Blog Github：GitHub 职位：Web 前端工程师 城市：北京 个人描述我是一个爱学习，有些完美主义，喜欢尝试新技术的FE。对于代码，我有些强迫症，代码格式必须要完美，在项目中喜欢使用ESLint。虽然在开发中要不时的添加些规则，但项目最后完毕，看着项目的代码，有种这是杰作的错觉。我喜欢有挑战的工作，我不希望因为每天的流水线工作让我失去对这份工作的热情。之前的工作，不是没有挑战，但最后我都一一解决。我也喜欢和志同道合喜欢技术的人一起讨论和研究技术，不管是在工作中，还是生活中。由于以前在一个小团队待过，我深知团队的重要性。其实团队不在人数多少，良好的沟通，不各执己见（任何人任何时候都不要钻牛角尖）才是关键。一个好的团队能规划好项目如何开发，使用哪些技术栈，协调团队配合，研讨技术方案。古以成败论英雄。对于技术过人的大牛，就应该给予更优厚的报酬，而大牛们也应该有责任去帮助小白们成长。虽然我不是大牛 ，但我也很喜欢帮助别人。 技能清单 Web开发：Node Web框架：Express/Koa 前端框架：Vue/React 前端工具：Webpack/Stylus/ESLint/Babel 版本管理：Svn/Git 前端技能：JavaScript/CSS/HTML/微信小程序/Ajax/JSONP 其他技能：基础Linux命令/Chrome移动端调试"},{"title":"Categories","date":"2017-11-21T08:43:24.570Z","updated":"2017-11-21T08:43:24.570Z","comments":true,"path":"categories/index.html","permalink":"https://jiankafei.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-11-21T08:43:41.973Z","updated":"2017-11-21T08:43:41.973Z","comments":true,"path":"tags/index.html","permalink":"https://jiankafei.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JS要点解析","slug":"JS要点解析","date":"2017-12-04T09:17:19.000Z","updated":"2017-12-09T02:15:41.546Z","comments":false,"path":"js/js-key-points/","link":"","permalink":"https://jiankafei.github.io/js/js-key-points/","excerpt":"前言对JS学习过程中的一些理解和总结","text":"前言对JS学习过程中的一些理解和总结 从我工作到 2017/10 辞职，总共两年时间，期间一直想写个总结JS的文章，却一直没下决心动手，这次，借着辞职学习的时间，把这件事办了。也算是给自己一个交代。 对于前端开发来说，JS的确是一门很有魔力的语言。它不需要静态类型语言对变量类型的严格要求，也不需要编译型语言需要编译才能真正执行（期间，学习了Go语言，真的很喜欢Go语言，也终于让我有理由学习后端开发了。虽然Node也可以，但使用JS写Node服务，真的不太舒服，后端还是需要静态类型语言来做才最合适），这让它在Web前端风生水起（我看过Dart的语法，出自Google，如Go般简洁，前端后端都有支持，很希望Dart能替代JS，但是看现在的情况是不可能了）。 C语言等类C的静态编译型语言里面，程序要想执行，都会有一个入口函数main。但JS在html里面通过script的方式加载，script分割代码的分割问题，以及JS加载都是通过script为单位进行编译（JS的编译好像只有词法分析和语法分析）和执行的问题，致使js在标准上写不了main入口函数，所以JS提供了全局作用域这么个东西。相当于JS线程自己就有个main函数在跑一样。 说到函数执行，这里就有几点需要提了。 JS函数传参调用的方式：传名调用 or 传值调用：JS是传值调用的，对于初学JS的小白来说，这让他们很矛盾。因为他们知道JS有基本类型，有引用类型。引用类型当作参数传入函数调用，如果按传值调用，引用类型传入的又是什么呢？传入的是引用类型的指针，又称内存地址，在JS里统一叫引用，也就是说JS不会把引用类型传过去（真传过去了，就是另一个对象了），而是把地址当作值传过去。 这里要说的一点是，JS函数传参后，arguments 和形参的关系：如果函数调用时，相应的位置传入了实参，那么 arguments 和形参是互相影响的，也就是说，修改了一个，另一个也会相应的更改，并且是严格相等的。如果相应位置没有传入实参，则他们 arguments 和形参之间是互相独立的。至少在chrome上测试是这样的。 JS在执行之前，也就是词法分析和语法分析之后，还有一个预解析，预解析做的事就是先提升var声明的变量，初始值为undefined，再提升function声明的函数（直接提升整个函数体）。其实可以这么理解，var和function提升的是变量的创建和初始化，只不过var的变量的初始值为undefined。let const class 等提升的是创建，但并没有提升初始化，而变量只有在初始化之后才可以使用，可以解释了let const 形成的暂时性死区，而且const 没有赋值操作。 该轮到函数执行了。在JS主线程的函数执行会形成一个执行栈，函数里定义的变量就都在栈内存里存放着，基本类型保存的就是真实的基本类型的值，引用类型保存的就是引用类型的地址，而引用类型们都在堆内存里存放着。栈内存里变量的存放是有次序和有固定大小的，这也是为什么基本类型string boolean number 的值是不可更改的原因，如果有新值都是另外开辟新的内存来存放新值，至于引擎对基本类型的优化，应该就挺底层的了，我们也不要太过关注。堆内存里对象的存放都是没有结构次序，任意存放的，大小不固定的，所以可以修改对象的属性。 函数的执行链是个后入先出的过程，函数执行完毕后，它的执行栈会被弹出，也就是销毁，栈都没了，里面存放的变量自然就释放了。而堆内存里的引用类型们可不会因为函数执行完毕而销毁，它们会等待GC来回收他们。 GC回收引用类型，我知道的有两种方式，为了少些文字，我把引用类型在之后都叫做对象： 引用计数：会标记变量或属性对对象的引用个数，如果引用个数为0，就是说它不在被使用，那将会在下一次垃圾回收中回收。但引用计数有循环引用的问题，导致对象无法被回收，A和B互相引用，但它们都没有被其他变量所引用，理应回收他们，计数方式就不能解决这个问题。 代表有，IE8-的浏览器，这个比较特殊，IE8-的JS引擎用的是标记清除，但IE8-浏览器提供的DOM和BOMd对象是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制使用的是引用计数，导致如果循环引用中存在COM对象，就会出现上述问题，IE9把COM对象变成了真正的JS对象，这个问题才得以解决。（出自JavaScript高级程序设计） 标记清除：现代的浏览器大都使用这种方式回收垃圾。它的策略是这样的： 标记阶段，从全局变量对象（根对象）向下遍历，对能从根对象访问到的对象，都添加标记，这些对象称为可达对象。 清除阶段，遍历堆内存，如果某个对象是可达对象，则清除标记，为下一次标记做准备，不可达对象直接回收内存。具体可以看这篇文章 接下来说下函数执行形成的作用域链：JS的全局作用域会生成一个全局变量对象，用来保存全局作用域内的变量，该对象很显然只会在页面关闭的时候才会销毁，因为这些变量会在之后的程序执行中被用到。 函数的定义：引擎为函数添加 [[scopechain]] 属性，该属性为它当前所处位置的作用域链。如果获得这个链条，后面会说。 JS函数在执行的时候，会创建一个 {excution context} 执行环境对象，就是该对象决定了函数调用时候的this值(call, apply, bind 会改变this)。在创建该对象的时候，还会做以下几件事： 为函数添加 [[scope]] 属性，值为 scopechain 创建执行时的活动对象 {activation object} ，活动对象里有 arguments this 命名参数 变量对象。 把 {activation object} 添加到 [[scope]] 属性的顶部，也就是第一个。 当执行完毕，释放[[scope]]，回收 {excution context]} {activation object} 可以看出，函数在执行的时候，都有自己的作用域链属性。而且作用域链就是个活动对象数组（具体什么结构，我也不知道，也许是集合呢）。但函数定义在什么地方是写死的，所以函数的 scopechain 永远是不会变的。这就是为什么叫做词法作用域。 这里做两个作用域链的示例： 123456789101112131415161718192021222324252627282930313233343536373839// 第一种：function a()&#123; function b()&#123; function c()&#123; function d()&#123;&#125;; d(); &#125;; c(); &#125;; b();&#125;;a();//定义 a.scopeChain = [window]//执行 a.scope = [a, ...a.scopeChain]//定义 b.scopeChain = a.scope//执行 b.scope = [b, ...b.scopeChain]//定义 c.scopeChain = b.scope//执行 c.scope = [c, ...c.scopeChain]//定义 d.scopeChain = c.scope//执行 d.scope = [d, ...d.scopeChain]第二种：a()function a()&#123; b()&#125;function b()&#123; c()&#125;function c()&#123;&#125;//定义 a.scopeChain = [window]//定义 b.scopeChain = [window]//定义 c.scopeChain = [window]//执行 a.scope = [a, ...a.scopeChain];//执行 b.scope = [b, ...b.scopeChain];//执行 c.scope = [c, ...c.scopeChain]; 等号右侧： window 指代得到是全局变量对象 a, b, c, d 指的是函数各自在执行时生成的活动对象 到了该说闭包的时候了，成气候了12345678910111213141516a();function a()&#123; var qq = 11; function b()&#123; console.log(qq); &#125;; b();&#125;function a()&#123; var qq = 11; return function()&#123; console.log(qq); &#125;;&#125;var b = a(); 闭包我这里想说个自己定义的概念，广义闭包，狭义闭包（爱因斯坦会不会打我）。 广义闭包就是函数内部没有使用外部作用域的变量的函数，或者使用了外部变量，但函数只在作用域内部使用的函数。 狭义闭包相反，狭义闭包就是我们常被问到必挂在嘴边的闭包。 第一种闭包是广义闭包，由于还是在父作用域体内，等a函数执行完毕，闭包离开执行环境，就会被回收； 第二种就是比较典型的狭义闭包，a内部的匿名函数形成闭包，并传递给b变量，如果a函数是在全局作用域，在不关闭页面的情况下只有把b赋值为null，解除引用，闭包才会被回收。如果a函数是在另一个函数体内，那么等这个父函数执行完毕，b离开执行环境，标记清除就会回收b引用的闭包。现代浏览器都比较智能，这一点基本可以放心，如果不放心，那就手动赋值为null吧。 上面说了闭包的产生和销毁，现在就来说说，我们整天念叨的闭包到底指的是什么。它又是和什么有关系的。 在之前我们已经说了函数定义和调用阶段所做的事。闭包就是和他们有关系。不管是函数定义上的 scopechain 还是执行时的 scope，它们都引用了祖辈函数执行的活动对象。广义闭包由于定义的函数在其父函数执行完毕后，就销毁了，所以不会一直保留对所有祖辈活动对象的引用。而狭义闭包，按理说函数执行完毕，内部定义的所有变量和函数都是要别回收的，但问题是如果把一个函数当成返回值返回了，返回之后还赋给一个变量，相当于这个函数在它的父函数执行完毕后理应销毁的情况下，并没有销毁，那么该函数身上的 scopechain 引用的活动对象也就不会释放，这就是闭包的根源，在外部引用了内部的函数，导致理应销毁的活动对象没有被销毁。 闭包说完了，该说说我们在前面提到的 {excution context} 执行环境对象，也叫执行上下文对象。这个对象是谁呢？有一个技巧，就是函数是以谁的方法的身份执行的，那么这个对象就是谁，this就是谁。this的确定就这么简单。在严格模式下，由于var function 声明的变量和函数默认不再挂载到window上。所以函数的直接执行，并没有作为任何对象的方法的身份来执行，所以this为undefined也是说的通的。 函数重载的概念其实不是JS的。JS在理论上或者语法上没有这个概念。这个概念一般存在于传统的静态类型语言里。由于静态类型语言在定义函数时，函数的形参的类型都是需要确定的，所以如果同一个函数在调用的时候，如果有传入不同类型或者个数的参数都能处理的需求，那就需要函数重载，重载根据传入的参数的类型和数量的不同实现签名，特定的传参调用会调用特定的签名函数。反观JS，JS的函数也是对象，同一函数名在同一作用域下只能有一个，后面的会覆盖前面的，同一变量不可能指向多个地址。所以重载不可能，但JS也有办法处理这种需求，那就是函数的 arguments 对象 和 最新的 rest 参数。拿arguments来说，它是一个集合，里面包含了所有传入的参数，我们可以通过判断 arguments.length 和 arguments 中的每一项的类型来做不同的操作，同样也实现了这种需求。 下面来说说对象： 首先要说的就是对象的引用。JS对于引用类型的处理非常高名，而这一处理方式也带来了很多其他的概念名词：浅拷贝，变量是否改变。 刚学JS时我很在意浅拷贝这个概念，但没过多久，我就觉得这对JS来说就是个伪概念，而且现在还非常盛行。js所有的引用类型都是在堆内存里面，他们都是独立的，并不是我们表面上看到的，一个嵌套一个，他们的属性存放的都是值，如果本身的值为引用类型，那么这个值就是引用类型的地址。所以可以认为，在存储机制方面，js对象都是扁平化的。我自己想了这么个词，不同意的可以提issue交流。 对象里最重要的当属原型和原型链了。原型是什么，原型就是个普通对象。原型链是什么，原型链用于属性查找（函数的作用域链用于变量查找），自身没有的属性沿着原型链一直往上找，直至找到。所以，最重要的其实是原型链。最需要了解的就是JS的面向对象编程了，因为它能很好的让人们了解原型及原型链。 JS使用原型链来实现面向对象编程。JS使用构造函数来构造对象，好多人喜欢把构造函数叫做类，构造函数就是个普通的函数。 为了节约书写时间，我这里直接使用类来表示构造函数（大家都懂的，JS没有类）。在讨论类之前，我先说说和函数有关的一个东西，使用函数来说比较好。JS里任何函数的定义，都会创建一个函数的伴生对象（我自己起的名），这个伴生对象就是构造新对象时的原型。这个图能很好的说明它们之间的关系: 图片说明：图片中new括起来的区域，是我自己想的过程，和真实的new的结果一样，这里只是为了做个说明，但不代表JS真实的new操作。 对象的方法都是函数，由于函数的复用性，所以没有必要都拥有各自的方法，但是属性是用来表示对象自身的状态的，所以各自的属性应该是独立的（不说例外情况） 基于以上，构造对象的包括工厂函数模式，构造函数模式，原型模式这里就不说了，大家都知道构造加原型模式，所以这里也不说了，都快嚼烂了。 至于好多人都说对于 protptype constructor proto 等概念混淆了，容易懵逼，这个我会在后面捋一遍。 先把继承讲了： 属性继承： 把父类拿到子类里执行，通过call apply bind，只要能改变父类this为子类this的方式都行，比如添加属性执行，在删除属性。这样的话。相当于把父类里定义的属性添加到子类里面了。没了！没什么难度！ 方法继承： 方法继承说白了，就是个属性查找的事，之前我们说过，属性查找基于原型链。所以我们只要使用原型链把这些对象连接起来，就万事大吉。不过这里只有一个忠告，就是不要让任何环节中的两个我们操作的对象是一个对象。因为原则就是一个对象修改自己的属性不应该影响到其他对象的属性。只要满足上述的要求，想怎么继承就怎么继承。 这里列举几个典型的继承方式，都是平常会接触到的： 1234567891011121314151617181920function Parent()&#123;&#125;function Child()&#123;&#125;// 组合继承Child.prototype = new Parent()// 道格拉斯继承function T()&#123;&#125;T.prototype = Parent.prototype;Child.prototype = new T();// 本质和道格拉斯继承一样Child.protptype = Object.create(Parent.prototype);// 非标准API实现继承，尽量不要使用Child.prototype.__proto__ = Parent.prototype;// 本质和 __proto__ 方式一样Object.setPrototypeOf(Child.prototype, Parent.prototype)// 其他自定义let obj = &#123;&#125;;Object.setPrototypeOf(obj, Parent.prototype);Child.prototype = obj;// 还是那句话，只要通过对象的原型属性把原型链连接好，想怎样继承都行。 注意点： 上述所谓的组合继承 是有缺陷的继承，因为如果Parent类需要传入参数，那我们就需要在继承的时候传入相应的参数，如果内部不做兼容处理，就会报错。但问题是，这样的继承就没有普遍性了，我们不可能每次都能传入合适的参数。所以国外的一个小伙，名叫道格拉斯，使用了一个中间类来避开这个问题，能避开的本质是，Parent 类只有在实例化的时候才会有这个问题，但中间类T不需要传参，T的实例化没有问题，也就解决问题了。 所以得出一个结论，在做继承时，满足以上我所说的要求的情况下，尽量不要使用父类的实例来做中间对象实现继承。只要避开这个，怎么样继承都行。 对于有些人觉的以下方式也没问题： 1Child.prototype = Parent.prototype; 这种方式一看就是和我上面说的有冲突，什么冲突？不要让任何环节中的两个我们操作的对象是一个对象。因为如果你改Child.prototype上的属性，就相当于修改Parent.prototype上的属性。所以严格禁止。 有人会说了，上面的道格拉斯继承，也是两个对象是同一个对象。说的好，但问题是，道格拉斯继承的中间类T的prototype不是我们要直接操作的对象，所以无所谓。 注：这里的直接操作说的是业务需求上的操作。如果有人作死，偏要拿到这些原型对象做各种修改，那就让他作死吧。 至于ES6的class，这里就不说了，它就是个语法糖，改变了一下语法书写，对内部的一些属性做了些更严格的限制外，和ES5一样。 JS里最重要的函数和对象说完了，似乎也没什么了，其他的都是些API，只要查文档就行。我一直秉承的一个原则就是，能查API文档解决的事情就不是事。了解API体现不了一个人的实力。 JS严格模式是一种向未来兼容的方式。也都是需要记住的一些规则，但都很合理。这里我也不贴出来了，用的多了，自然就有印象了，MDN，百度，网上一大堆。 开发者自己在使用严格模式的时候，不要把 ‘use strict’ 使用在全局，只使用在自己的代码最外层函数里，因为你的代码不应该影响别人的代码，而且如果别人没使用严格模式，全局模式使用就可能会报错。","categories":[{"name":"js","slug":"js","permalink":"https://jiankafei.github.io/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://jiankafei.github.io/tags/js/"}]},{"title":"Web全链路优化","slug":"Web全链路优化","date":"2017-11-21T03:52:15.000Z","updated":"2017-12-08T13:03:07.193Z","comments":false,"path":"web/full-link-optimization/","link":"","permalink":"https://jiankafei.github.io/web/full-link-optimization/","excerpt":"前言从访问一个页面到页面的呈现，要经历以下的过程：DNS查询-TCP连接 &gt; 客户端http请求 &gt; 服务端响应 &gt; 客户端渲染下面就从整个过程分析下有哪些可以优化的地方和措施。","text":"前言从访问一个页面到页面的呈现，要经历以下的过程：DNS查询-TCP连接 &gt; 客户端http请求 &gt; 服务端响应 &gt; 客户端渲染下面就从整个过程分析下有哪些可以优化的地方和措施。 DNS查询优化：client &gt; os &gt; hosts &gt; os发起DNS请求 DNS查询总是要经过上述过程的，不可避免。可以优化的地方是前端的 DNS-Prefetch 链接预取。在页面的head头部加入：1&lt;link ref=\"prefetch\" href=\"\"&gt; 这样可以预查询DNS和预加载资源到缓存。 请求速度优化：资源优化： 对同一个域名的同类资源进行请求合并，减少http请求数，需要后端支持； 对资源进行压缩及合并处理，如果可以的话； 如果一次性加载的资源少，尽量使用一个cdn，如果加载的资源非常多，则可以启用多个cdn域名，从而突破前端连接数限制； 资源按需加载，比如在 SPA 单页应用中，如果单页应用比较大，就不要一次性加载全部资源和页面，而应该按需异步加载访问的页面组件。webpack提供了 Code Splitting 代码分割功能，Vue就使用该功能实现异步组件； http协议选择：各大浏览器厂商都已经支持 http2了，如果可以，尽量启用 http2。http2 有很多优点： 服务端推送，可以缓存； 多路复用：单连接并发多请求。基于流的实现； 头部压缩：使用 HPACK 算法压缩头部； 请求优先级和依赖性：优先级高的需要首先处理，优先级低的可以稍微排排队； 二进制文件，解析更有效率，更紧密，更不容易出错； 渲染优化：script优化： script标签放到body闭合标签前面，不阻塞页面渲染，加快页面显示； 永远只在必要的情况下使用框架和库，如果业务很小但是用了较大的库，即使是 jQuery 也是得不偿失的； 能异步加载和延迟加载的script就异步和延迟加载，比如统计代码； css优化： 删除无用规则和重复规则； 可以考虑内联关键CSS； 避免@imports和Base64；避免 Bas64 可以提高css文件的压缩比率；甚至在任何文件里都应该避免使用 Base64； 尽量少的使用耗性能的 css 属性和选择器，比如 * 通配符，从而加快CSSOM构建和渲染。css优化细节挺多的，这里不细说； style标签放到head标签，防止页面的跳动渲染； image优化： 尽量使用压缩比率高的格式，比如 webp； 对于图标，尽量使用svg或者iconfont字体图标。也可以使用兼容性较好的 css sprite； 尽量不要包含太多的 Base64 格式的图片，会降低文件压缩率； 如果页面有大量图片，建议做图片延迟加载和预加载；在分页业务里，可以考虑使用图片预加载。在一次性展示大量图片的页面里，可以考虑使用延迟加载。 注：更具体的图片优化，可以看这篇文章：图片优化 html优化： 尽量使用语义化标签，提高SEO优化； 对于不支持h5标签的浏览器采用html5.shim.js来支持； 标签不要嵌套过深； 对于移动端的响应式布局和高清显式，可以看我的原创项目flexible，该项目在生产环境下经历了多个版本，目前已经很稳定了，具体可以查看项目。 服务端： 避免不必要的重定向； 使用内容分发网络 CDN ，加快资源响应； 适当调节CDN的TTL值，增加缓存时间，提高缓存命中率； 开启 gzip 压缩； 缓存优化： Last-Modified: 能初步检测文件是否更改，没更改则返回304，但是 Last-Modified 也有它自己的缺点，比如文件内容没改变，只是最后修改时间改变，还有它的检测时间是秒级的，还有它不能精确得到文件的最后修改时间，这些问题都会导致问题； ETag：ETag可以解决Last-Modified的问题，ETag是内容相关的。所有把两者放在一起，可以很好的做到缓存优化； Cache-Control: 用于代替 Expires，对于某些只需要在一定时间之后过期的资源来说，使用它最合适了； 其他： 服务端的其他优化，比如负载均衡等，由于尚不了解，这里就不说了； 数据库也不甚了解，这里也不说了； 哪里说的不对，可以提issue交流；","categories":[{"name":"web","slug":"web","permalink":"https://jiankafei.github.io/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://jiankafei.github.io/tags/web/"}]},{"title":"flex布局解析","slug":"flex布局解析","date":"2016-08-12T00:15:29.000Z","updated":"2017-12-08T13:02:25.171Z","comments":false,"path":"css/flex-layout/","link":"","permalink":"https://jiankafei.github.io/css/flex-layout/","excerpt":"前言flexbox的发展还是比较曲折的，总共经历了三个版本，旧版本，过度版本，新版本。想想都可怕。这是我在学习flexbox盒模型后，对它的理解，希望能解决初学者在学习flexbox时遇到的概念陷阱，帮助初学者很好的理解和学习flexbox。","text":"前言flexbox的发展还是比较曲折的，总共经历了三个版本，旧版本，过度版本，新版本。想想都可怕。这是我在学习flexbox盒模型后，对它的理解，希望能解决初学者在学习flexbox时遇到的概念陷阱，帮助初学者很好的理解和学习flexbox。 看法这里我只说说最新版本，在我看来，学习即将不再使用的东西是对时间和精力的浪费(个人观点，不喜勿喷)，旧的东西大家如果想了解可以度娘。虽然我不说旧版本，但我还是会给出完整的兼容实现。具体见我的这个项目flexible的flexbox.css。 正题flexbox盒模型该盒模型，你只需知道有主轴和侧轴之分就行，没有横轴和竖轴或者水平和垂直之说。那怎么区分主轴和侧轴呢，见下方。 flex-direction1flex-direction: row | row-reverse | column | column-reverse 一句话，该属性设置的方向就是主轴，和主轴垂直的方向那就是侧轴了。这里需要说一点，就是每一个轴都有两个方向。默认从左到右，从上到下，标准的坐标系。现在主轴和侧轴都确定了，但如果内容比较多，你想让它换行，怎么办呢，不急，看下面。 flex-wrap1flex-wrap：nowrap | wrap | wrap-reverse 该属性就是 flex 盒模型里的换行属性。三个值我就不解释了，自己查单词去。既然有了换行，那就说明会有多行，如果有个场景需要让多行的元素块在定高的盒子里上下居中，怎么办呢，很显然这说的时对齐方式了。看下面。 justify-content主轴对齐方式1justify-content：flex-start | flex-end | center | space-between | space-around 这个真没什么可解释的 align-content侧轴对齐方式1align-content：flex-start | flex-end | center | space-between | space-around | stretch 这里唯一需要说的就是 stretchstretch 的作用是，在侧轴间距上，将各行均匀伸展来撑满真个侧轴间距。具体分两种情况。如果剩余的空间是负数，该值等效于’flex-start’；在其它情况下，剩余空间被所有行平分，以扩大它们的侧轴尺寸。 在侧轴的对齐上，align-content 只解决了把侧轴里多行看成整体在盒子内的对齐；而侧轴里的每一行上元素的高度不一定是一致的，有的高有的低，该行的行高肯定就是最高元素的高度了。这里我们称为行内轴，有些场景就需要在一行里这些元素是如何对齐的，也就是在行内轴上是如何对齐的，这有点像 vertical-align（只是有点像，不要混为一谈）。是在本行内开始位置对齐，还是中部对齐，还是结束对齐等等（由flex-direction决定哪里是开始位置） align-items1align-items：flex-start | flex-end | center | baseline | stretch 这里说下 baseline 如果弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。 还有 stretch 会遵照’min/max-width/height’属性的限制 到现在，侧轴和行内轴的对齐都解决了，但有些人说行内轴对齐好了，但我想让一行中的某一个元素的对齐方式和其他的元素不一样，该怎么办呢，看下面。 align-self1align-self：auto | flex-start | flex-end | center | baseline | stretch 这个属性的值和上一个的一模一样，是对行内轴对齐方式的复写，但是只应用在子元素上，从而单独复写对齐方式。 ok，现在换行，对齐，子元素单独对齐都好了，那为什么还叫伸缩盒模型呢，那是因为下面。 flex这个属性其实是个简写属性，具体是 flex-grow flex-shrink flex-basis 的简写属性 flex-grow扩展比率，默认 0没什么可说的，就是个数学问题 flex-shrink收缩比率，不允许负值，默认 1没什么可说的，就是个数学问题 flex-basis1flex-basis: &lt;length&gt; | &lt;percentage&gt; | auto | content 基准宽度，就是说在此宽度的基础上扩展或收缩宽度这里说下 auto： 无特定宽度值，取决于其它属性值还有 content：基于内容自动计算宽度 flex-flow和它的名字一样，掌管盒子内子元素的流动，就和水一样，流向哪个方向，遇到石头是冲过去还是拐弯，都是这个属性的事情。废话不说了，该属性也是个简写属性，是 flex-direction 和 flex-wrap 的简写属性。没了。 order记得小时候每次开学，都会有一次排队选座位的经历，老师显然大家自觉排好，然后老师再仔细看一遍，把没排好同学互换过来，然后分座位。排队很简单，错了可以再排，但如果时html元素呢，如果我们把元素的顺序都写好了， 在没有定位，浮动，js操作的情况下，元素肯定是按顺序排列的，如果我们想互换元素之间的顺序，是做不到的。那如果有这样的需求怎么办呢。这就要order上场了，首先 display: flex 搭好台子，order就可以表演了。通过对flex子元素设置order属性，可以改变元素原来的显示顺序。当然它也受 flex-direction 的影响。具体规则是：用整数值来定义排列顺序，数值小的排在前面。可以为负值。","categories":[{"name":"css","slug":"css","permalink":"https://jiankafei.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://jiankafei.github.io/tags/css/"}]},{"title":"移动端web高清屏显示及伸缩布局方案(原创)","slug":"移动端web高清屏显示及伸缩布局方案","date":"2016-08-11T02:41:29.000Z","updated":"2017-12-08T12:46:20.246Z","comments":false,"path":"js/flexible/","link":"","permalink":"https://jiankafei.github.io/js/flexible/","excerpt":"前言该解决方案包含的技术有：传统的rem移动端布局；动态修改meta标签实现不同dpr设备的页面缩放；flex弹性布局；媒体查询加载相应倍图；Img的srcset；background的image-set；svg图标系统；","text":"前言该解决方案包含的技术有：传统的rem移动端布局；动态修改meta标签实现不同dpr设备的页面缩放；flex弹性布局；媒体查询加载相应倍图；Img的srcset；background的image-set；svg图标系统； 这个方案我是在网上看了关于 viewport 缩放页面后，结合当前使用的rem布局方案而来。你有没有在移动H5开发的时候遇到过这样的情况，页面不清晰，明明1px的线条看上去却很宽，而且有些模糊，图片看上去好像失真了一样？和大厂的m站一比，光看自己页面的细节就土的掉渣。遇到过，那就说明你用的移动设备的屏幕是高清屏，也就是dpr大于1的屏幕。而这一切都是拜 乔帮主(你知道是哪位) 所赐。我这里只是简单的介绍，本来也想详细的说说，但感觉自己的语言组织不是太给力，所以还是推荐大家直接看参考文章，这些文章都很值得大家好好看的，里面图文并茂，该有的不该有的都有。 传统的一种移动端布局方案w: 当前页面宽度x: 当前字体大小 换算关系:w / 640 = x / 100 所有的px尺寸都除以100，就得到rem的尺寸 解决什么问题border: 1px问题; 图片高清问题; 屏幕适配布局问题; 用到的知识点设备像素比dprdpr = 物理像素 / 设备独立像素; 参考文章：设备像素比devicePixelRatio简单介绍原创移动端高清、多屏适配方案 viewport flex布局关于flex布局可以看下我的这篇文章：flex布局解析 解决思路flex解决布局适配问题参见 flexible项目 的flexible.css 动态修改meta标签实现页面的缩放参见 flexible项目 的flexible.js 高清图片SVG 图标系统可以解决小icon的高清适配问题，因为SVG是矢量图，缩放不会失真;建议通过 iconfont 制作这里有一个在线的 svg压缩工具 123456789101112/* 定义 */&lt;svg style=\"display: none\"&gt; &lt;symbol id=\"icon\" viewBox=\"0 0 200 200\"&gt; &lt;title&gt;opt&lt;/title&gt; &lt;path d=\"\" /&gt; &lt;/symbol&gt;&lt;/svg&gt;/* 使用 */&lt;svg&gt; &lt;use xlink:href=\"#icon\"&gt;&lt;/use&gt;&lt;/svg&gt; iconfont可以解决 icon 的高清适配问题，建议通过 iconfont 制作 MediaQueryMediaQuery 可以解决背景图片的高清适配; 123456@media only screenand (-webkit-device-pixel-ratio:2)and (-webkit-min-device-pixel-ratio:1.5)and (-webkit-max-device-pixel-ratio:2.5)&#123; background: url(icon_2@.png) no-repeat;&#125; CSS的image-set属性image-set属性可以解决背景图片的高清适配;目前移动端可以使用带 -webkit- 前缀的属性，Android4.4及以上系统，IOS9.0及以上系统;可在 caniuse 查看该属性目前的支持情况; 123456789div&#123; /* 不支持image-set的浏览器 */ background: url(icon_1@.png) no-repeat; /* 支持image-set的浏览器 */ background: -webkit-image-set( url(icon_1@.png) 1x, /* 普通屏 */ url(icon_2@.png) 2x /* 高清屏 */ );&#125; 图片延迟加载移动端的图片延迟加载在我看来很必要的，而且顺带可以解决图片的高清适配;通过 window.devicePixelRatio 可以获取到当前设备的dpr，然后加载相应的图片。 img的srcset和sizes属性解决图片的高清适配，具体还是看张鑫旭张老师的这篇文章 转载请注明出处：移动端web高清屏显示及伸缩布局方案","categories":[{"name":"js","slug":"js","permalink":"https://jiankafei.github.io/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://jiankafei.github.io/tags/js/"}]}]}